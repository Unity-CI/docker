name: New Editor Version ðŸ—”

on:
  repository_dispatch:
    types: [new_editor_image_requested]

# Further reading:
# https://docs.github.com/en/free-pro-team@latest/actions/reference/events-that-trigger-workflows#repository_dispatch
# https://docs.github.com/en/free-pro-team@latest/rest/reference/repos#create-a-repository-dispatch-event
# https://developer.github.com/webhooks/event-payloads/#repository_dispatch

jobs:
  buildImage:
    name: "ðŸ›  Build unityci/editor (${{ matrix.targetPlatform}})"
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        targetPlatform:
          - linux-il2cpp
          - windows-mono
          - mac-mono
          - ios
          - android
          - webgl
    steps:
      -
      - name: Checkout
        uses: actions/checkout@v2
      ###########################
      #        Variables        #
      ###########################
      - name: Show hook input
        run: |
          echo "Event ${{ github.event.event_type }}"
          echo "Payload ${{ github.event.client_payload }}"
          echo "Unity version: ${{ github.event.client_payload.unityVersion }}"
          echo "Unity changeset: ${{ github.event.client_payload.changeSet }}"
          echo "Image tag (patch): ${{ github.event.client_payload.patchTag }}"
          echo "Image tag (minor): ${{ github.event.client_payload.minorTag }}"
          echo "Image tag (major): ${{ github.event.client_payload.majorTag }}"
      ###########################
      #          Setup          #
      ###########################
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-editor-${{ github.event.client_payload.unityVersion }}-${{ matrix.targetPlatform}}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-editor-${{ github.event.client_payload.unityVersion }}-${{ matrix.targetPlatform}}-
            ${{ runner.os }}-buildx-editor-${{ github.event.client_payload.unityVersion }}-
            ${{ runner.os }}-buildx-editor-
            ${{ runner.os }}-buildx-
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Check if image not already exists
        run: |
          # Source: https://stackoverflow.com/a/39731444/3593896
          function docker_tag_exists() {
            curl --silent -f -lSL https://index.docker.io/v1/repositories/$1/tags/$2 > /dev/null
          }

          if docker_tag_exists unityci/editor ubuntu-${{ github.event.client_payload.unityVersion }}-${{ matrix.targetPlatform}}-${{ github.event.client_payload.patchTag }} ; then
            echo "Image already exists. Exiting."
            exit 1
          fi

      ###########################
      #    Free disk space   #
      ###########################
      - name: Free disk space
        run: .github/workflows/scripts/free_disk_space.sh

      ###########################
      #   Pull previous images  #
      ###########################
      - name: Pull base image (must exist)
        run: docker pull unityci/base:${{ github.event.client_payload.patchTag }}
      - name: Pull hub image (must exist)
        run: docker pull unityci/hub:${{ github.event.client_payload.patchTag }}

      ###########################
      #       Editor image      #
      ###########################
      - name: Build and publish
        uses: docker/build-push-action@v2
        id: build_editor_image
        with:
          context: .
          file: ./editor/Dockerfile
          build-args: |
            hubImage=unityci/hub:${{ github.event.client_payload.patchTag }}
            baseImage=unityci/base:${{ github.event.client_payload.patchTag }}
            module=${{ matrix.targetPlatform }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
          push: true
          tags: |
            "unityci/editor:ubuntu-${{ github.event.client_payload.unityVersion }}-${{ matrix.targetPlatform}}-${{ github.event.client_payload.patchTag }}"
            "unityci/editor:${{ github.event.client_payload.unityVersion }}-${{ matrix.targetPlatform}}-${{ github.event.client_payload.patchTag }}"
            "unityci/editor:ubuntu-${{ github.event.client_payload.unityVersion }}-${{ matrix.targetPlatform}}-${{ github.event.client_payload.minorTag }}"
            "unityci/editor:${{ github.event.client_payload.unityVersion }}-${{ matrix.targetPlatform}}-${{ github.event.client_payload.minorTag }}"
            "unityci/editor:ubuntu-${{ github.event.client_payload.unityVersion }}-${{ matrix.targetPlatform}}-${{ github.event.client_payload.majorTag }}"
            "unityci/editor:${{ github.event.client_payload.unityVersion }}-${{ matrix.targetPlatform}}-${{ github.event.client_payload.majorTag }}"
            ### Warning: If we once publish latest, we will have to do it forever. Lets not do that unless it's needed ###
      - name: Inspect
        run: |
          docker buildx imagetools inspect unityci/editor:${{ github.event.client_payload.patchTag }}
      - name: Image digest
        run: echo ${{ steps.build_editor_image.outputs.digest }}
      - name: Update DockerHub description
        uses: peter-evans/dockerhub-description@v2
        with:
          username: ${{ secrets.DOCKEReditor_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
          repository: unityci/editor
          short-description: $(cat ./editor/100-characters-dockerhub-description.txt)
          readme-filepath: ./editor/README.md

      ###########################
      #         Metrics         #
      ###########################
      - name: Disk space after
        if: always()
        run: df -h
